{
  "_args": [
    [
      {
        "raw": "weex-bindingx@0.0.17",
        "scope": null,
        "escapedName": "weex-bindingx",
        "name": "weex-bindingx",
        "rawSpec": "0.0.17",
        "spec": "0.0.17",
        "type": "version"
      },
      "/Users/qizhiyuan/Desktop/WeexProject/weextest1/node_modules/weex-ui"
    ]
  ],
  "_from": "weex-bindingx@0.0.17",
  "_id": "weex-bindingx@0.0.17",
  "_inCache": true,
  "_location": "/weex-bindingx",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/weex-bindingx_0.0.17_1521685784253_0.5193653220242096"
  },
  "_npmUser": {
    "name": "huxiaoqi",
    "email": "382850581@qq.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "weex-bindingx@0.0.17",
    "scope": null,
    "escapedName": "weex-bindingx",
    "name": "weex-bindingx",
    "rawSpec": "0.0.17",
    "spec": "0.0.17",
    "type": "version"
  },
  "_requiredBy": [
    "/weex-ui"
  ],
  "_resolved": "https://registry.npmjs.org/weex-bindingx/-/weex-bindingx-0.0.17.tgz",
  "_shasum": "08986506c4ec998f8864f0c4635ba646c0911199",
  "_shrinkwrap": null,
  "_spec": "weex-bindingx@0.0.17",
  "_where": "/Users/qizhiyuan/Desktop/WeexProject/weextest1/node_modules/weex-ui",
  "author": "",
  "bugs": {
    "url": "https://github.com/alibaba/bindingx/issues"
  },
  "dependencies": {
    "bindingx-parser": "0.x.x",
    "bindingx-web-polyfill": "0.x.x",
    "object-assign": "^4.1.1",
    "simple-lodash": "^0.0.2",
    "universal-env": "0.x.x"
  },
  "description": "bindingx,expression,binding,weex",
  "devDependencies": {
    "@ali/weex-vue-render": "^1.0.12",
    "autoprefixer": "^8.0.0",
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-minify-dead-code-elimination": "^0.3.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-rax": "^0.5.2",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "bindingx-parser": "^0.0.1",
    "chalk": "^2.3.0",
    "css-loader": "^0.28.9",
    "file-loader": "^1.1.6",
    "postcss-plugin-px2rem": "^0.7.0",
    "postcss-plugin-weex": "^0.1.6",
    "rax": "^0.5.3",
    "rax-listview": "^0.5.2",
    "rax-picker": "^0.5.2",
    "rax-text": "^0.5.2",
    "rax-view": "^0.5.2",
    "rax-webpack-plugin": "^0.5.2",
    "vue": "^2.5.13",
    "vue-loader": "^14.1.1",
    "vue-style-loader": "^3.1.2",
    "vue-template-compiler": "^2.5.13",
    "webpack": "^3.11.0",
    "webpack-concat-plugin": "^2.4.2",
    "webpack-dev-server": "^2.7.1",
    "webpack-merge": "^4.1.1",
    "weex-loader": "^0.7.2",
    "weex-vue-precompiler": "^0.1.17"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9FtaX9Gadc+eROvPTsO1yCSYx7fhCsVv01PeaLv4hh+zTqGtlesY2/sc5Wb0u6ExzNO9pkqj73OWbUkQB0A5mQ==",
    "shasum": "08986506c4ec998f8864f0c4635ba646c0911199",
    "tarball": "https://registry.npmjs.org/weex-bindingx/-/weex-bindingx-0.0.17.tgz",
    "fileCount": 28,
    "unpackedSize": 341343
  },
  "homepage": "https://github.com/alibaba/bindingx#readme",
  "keywords": [
    "bindingx",
    "expression",
    "binding",
    "weex"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "huxiaoqi",
      "email": "382850581@qq.com"
    }
  ],
  "name": "weex-bindingx",
  "optionalDependencies": {},
  "readme": "# weex-bindingx\n\n## Install\n\n```bash\n$ npm install weex-bindingx --save\n```\n\n## Usage\n\n```jsx\nimport bindingx from 'weex-bindingx';\n```\n\n\n## API\n\n\n### Methods\n\n|name|args|returns|description|\n|:---------------|:--------|:----|:----------|\n|prepare|{object} options|{object}|prepare bindingx|\n|bind|{object} options|{object}|bind an expression|\n|unbind|{object} options| void |unbind an expression|\n|unbindAll|| void |unbind for all|\n\n### Arguments Introduction\n\n#### options\n\n##### anchor {ElementReference|HTMLElement}\n\n- element to trigger the animation ，\n  - pass the element in web,such as ``` findDOMNode(this.refs.block) ```\n  - pass the element ref in weex, `findDOMNode(this.refs.block).ref`\n\n##### eventType {String}\n\n- pass the type of event to trigger the binding, like `scroll`,`pan`,`timing`,`orientation`\n\n##### instanceId {String}\n\n- pass the instanceId in weex, you can use `document.id` to get it，you should't pass it in web\n\n##### options {Object}\n\n- option configs for binding\n  - touchAction (web support only) ,you can pass `auto` or `pan-x` or `pan-y`,default value is `auto`\n  - thresholdX (web support only)  default value is `10`,it means the `panstart` event won't be triggerred until the distance of touchmove `>10`\n  - thresholdY (web support only)  default value is`10`\n  - touchActionRatio (web support only) default value is `0.5`, it means the ratio of width/height\n\n##### props {Array}\n\n- elements for animation\n   - element {ElementReference|HTMLElement}\n  - expression {String|Object}\n    - origin {String} bindingx expression\n    - transformed {String}\n  - property {String} property for animation\n  - instanceId\n\n\n## Example\n\n### RAX\n\n```jsx\nimport {createElement, Component, render} from 'rax';\nimport bindingx from 'weex-bindingx';\nimport View from 'rax-view';\nimport {isWeex} from 'universal-env';\n\nfunction getEl(el){\n   return isWeex ? findDOMNode(el).ref : findDOMNode(el);\n}\n\nclass App extends Component {\n\n  x = 0;\n  y = 0;\n\n  componentDidMount(){\n    this.bindEl();\n  }\n\n  onTouchStart(){\n    this.bindEl();\n  }\n\n  bindEl(){\n    let blockEl = getEl(this.refs.block);\n    let token = bindingx.bind({\n      anchor: blockEl,\n      eventType: 'pan',\n      props: [\n        {\n          element: blockEl,\n          property: 'transform.translateX',\n          expression: `x+${this.x}`\n        },\n        {\n          element: blockEl,\n          property: 'transform.translateY',\n          expression: `y+${this.y}`\n        }]\n      },(e)=>{\n\n      if (e.state === 'end') {\n        this.x += e.deltaX;\n        this.y += e.deltaY;\n      }\n\n    });\n\n  }\n\n  render(){\n     return (<View onTouchStart={(e) => this.onTouchStart(e)} ref=\"block\" style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: 300,\n            height: 300,\n            backgroundColor: 'red'\n      }}>block</View>)\n  }\n}\n\nrender(<App />);\n```\n\n### Vue\n\n```\n<template>\n    <scroller class=\"scroller\" >\n        <div :ref=\"'box'\" class=\"box\" @touchstart=\"ontouchstart\"  @appear=\"onappear\"></div>\n    </scroller>\n</template>\n\n<style scoped>\n    .scroller {\n        flex: 1;\n\n    }\n    .box {\n        border-width: 2px;\n        border-style: solid;\n        border-color: #BBBBBB;\n        width: 250px;\n        height: 250px;\n        margin-top: 250px;\n        margin-left: 250px;\n        background-color: #EEEEEE;\n        margin-bottom:500px;\n    }\n</style>\n\n<script>\n  import {isWeex} from 'universal-env';\n  import bindingx from 'weex-bindingx';\n\n  function getEl(el) {\n    if (typeof el === 'string' || typeof el === 'number') return el;\n    return isWeex ? el.ref : el instanceof HTMLElement ? el : el.$el;\n  }\n\n\n  export default {\n    data () {\n      return {\n        x: 0,\n        y: 0,\n        flag: 0\n      }\n    },\n    methods: {\n      onappear () {\n        this.bind();\n      },\n      bind () {\n        var box = getEl(this.$refs.box);\n        bindingx.bind({\n          anchor: box,\n          eventType: 'pan',\n          props: [\n            {\n              element: box,\n              property: 'transform.translateX',\n              expression: {\n                origin: `x+${this.x}`,\n                transformed: `{\\\"type\\\":\\\"+\\\",\\\"children\\\":[{\\\"type\\\":\\\"Identifier\\\",\\\"value\\\":\\\"x\\\"},{\\\"type\\\":\\\"NumericLiteral\\\",\\\"value\\\":\\\"${this.x}\\\"}]}`\n              }\n            },\n            {\n              element: box,\n              property: 'transform.translateY',\n              expression: {\n                origin: `y+${this.y}`,\n                transformed: `{\\\"type\\\":\\\"+\\\",\\\"children\\\":[{\\\"type\\\":\\\"Identifier\\\",\\\"value\\\":\\\"y\\\"},{\\\"type\\\":\\\"NumericLiteral\\\",\\\"value\\\":\\\"${this.y}\\\"}]}`\n              }\n            }\n          ]\n        }, (e) => {\n          if (e.state === 'end') {\n            this.x += e.deltaX;\n            this.y += e.deltaY;\n          }\n        });\n      },\n      ontouchstart (event) {\n        this.bind();\n      }\n    }\n  }\n</script>\n\n```\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alibaba/bindingx.git"
  },
  "scripts": {
    "build": "node webpack.config.js",
    "start-rax": "node webpack.dev.rax.config.js",
    "start-vue": "node webpack.dev.vue.config.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.0.17"
}
